{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { prisma } from \"../database/prisma\";\nexport var criarInquilino = function () {\n  var _ref = _asyncToGenerator(function* (req, res) {\n    try {\n      var _req$body = req.body,\n        cpf = _req$body.cpf,\n        name = _req$body.name,\n        tel = _req$body.tel,\n        email = _req$body.email,\n        enderecoId = _req$body.enderecoId;\n      var errors = [];\n      if (!cpf) {\n        errors.push(\"O campo 'cpf' é obrigatório.\");\n      }\n      if (!name) {\n        errors.push(\"O campo 'name' é obrigatório.\");\n      }\n      if (!tel) {\n        errors.push(\"O campo 'tel' é obrigatório.\");\n      }\n      if (!email) {\n        errors.push(\"O campo 'email' é obrigatório.\");\n      }\n      if (!enderecoId) {\n        errors.push(\"O campo 'enderecoId' é obrigatório.\");\n      } else {\n        var endereco = yield prisma.endereco.findUnique({\n          where: {\n            id: enderecoId\n          }\n        });\n        if (!endereco) {\n          errors.push(\"Endereço não encontrado para o ID fornecido: \" + enderecoId);\n        }\n      }\n      if (errors.length > 0) {\n        return res.status(422).json({\n          mensagem: \"Por favor, corrija os seguintes erros:\",\n          errors: errors\n        });\n      }\n      var inquilino = yield prisma.inquilino.create({\n        data: {\n          cpf: cpf,\n          name: name,\n          tel: tel,\n          email: email,\n          enderecoId: enderecoId\n        }\n      });\n      return res.json(inquilino);\n    } catch (error) {\n      console.error(\"Erro ao criar Inquilino\", error);\n    } finally {\n      yield prisma.$disconnect();\n    }\n  });\n  return function criarInquilino(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var pegarInquilinos = function () {\n  var _ref2 = _asyncToGenerator(function* (req, res) {\n    var inquilinos = yield prisma.inquilino.findMany();\n    return res.json(inquilinos);\n  });\n  return function pegarInquilinos(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nfunction push(arg0) {\n  throw new Error(\"Function not implemented.\");\n}\nvar InquilinoController = {\n  criarInquilino: criarInquilino,\n  pegarInquilinos: pegarInquilinos\n};\nexport default InquilinoController;","map":{"version":3,"names":["prisma","criarInquilino","_ref","_asyncToGenerator","req","res","_req$body","body","cpf","name","tel","email","enderecoId","errors","push","endereco","findUnique","where","id","length","status","json","mensagem","inquilino","create","data","error","console","$disconnect","_x","_x2","apply","arguments","pegarInquilinos","_ref2","inquilinos","findMany","_x3","_x4","arg0","Error","InquilinoController"],"sources":["C:/Users/digoR/OneDrive/Área de Trabalho/DEV/Sollos/Deploy/VistoApp_Backend/src/controller/InquilinoController.ts"],"sourcesContent":["import { Request, Response } from \"express\";\r\nimport { prisma } from \"../database/prisma\";\r\n\r\nexport const criarInquilino = async (req: Request, res: Response) => {\r\n  try {\r\n    const { cpf, name, tel, email, enderecoId } = req.body;\r\n    const errors = [];\r\n\r\n    if (!cpf) {\r\n      errors.push(\"O campo 'cpf' é obrigatório.\");\r\n    }\r\n\r\n    if (!name) {\r\n      errors.push(\"O campo 'name' é obrigatório.\");\r\n    }\r\n\r\n    if (!tel) {\r\n      errors.push(\"O campo 'tel' é obrigatório.\");\r\n    }\r\n\r\n    if (!email) {\r\n      errors.push(\"O campo 'email' é obrigatório.\");\r\n    }\r\n\r\n    if (!enderecoId) {\r\n      errors.push(\"O campo 'enderecoId' é obrigatório.\");\r\n    } else {\r\n      // Verifique se o endereço com o ID fornecido existe\r\n      const endereco = await prisma.endereco.findUnique({\r\n        where: {\r\n          id: enderecoId,\r\n        },\r\n      });\r\n\r\n      if (!endereco) {\r\n        errors.push(\r\n          \"Endereço não encontrado para o ID fornecido: \" + enderecoId\r\n        );\r\n      }\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n      return res.status(422).json({\r\n        mensagem: \"Por favor, corrija os seguintes erros:\",\r\n        errors,\r\n      });\r\n    }\r\n\r\n    const inquilino = await prisma.inquilino.create({\r\n      data: {\r\n        cpf,\r\n        name,\r\n        tel,\r\n        email,\r\n        enderecoId,\r\n      },\r\n    });\r\n\r\n    return res.json(inquilino);\r\n  } catch (error) {\r\n    console.error(\"Erro ao criar Inquilino\", error);\r\n  } finally {\r\n    await prisma.$disconnect();\r\n  }\r\n};\r\n\r\n//PARA CRIAR UM INQUILINO COM UM IMOVEL JÁ ALUGADO DESCOMENTE\r\n\r\n// export const criarInquilinoAlugado = async (req: Request, res: Response) => {\r\n//   const { cpf, name, tel, email, enderecoId, imovelId } = req.body;\r\n\r\n//   if (!cpf || !name || !tel || !email || !enderecoId || !imovelId) {\r\n//     return res.status(422).json({\r\n//       mensagem: \"Para cadastrar um Inquilino, preencha todos os campos!\",\r\n//     });\r\n//   } else {\r\n//     try {\r\n//       const inquilino = await prisma.inquilino.create({\r\n//         data: {\r\n//           cpf,\r\n//           name,\r\n//           tel,\r\n//           email,\r\n//           enderecoId,\r\n//           aluga: {\r\n//             create: {\r\n//               imovelId,\r\n//             },\r\n//           },\r\n//         },\r\n// //       });\r\n\r\n//       return res.json(inquilino);\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//       return res.status(500).json({ mensagem: \"Erro ao criar inquilino.\" });\r\n//     }\r\n//   }\r\n// };\r\n\r\n// Obter todos os inquilinos\r\nexport const pegarInquilinos = async (req: Request, res: Response) => {\r\n  // Busca todos os inquilinos no banco de dados usando o Prisma\r\n  const inquilinos = await prisma.inquilino.findMany();\r\n\r\n  // Retorna a lista de inquilinos como resposta\r\n  return res.json(inquilinos);\r\n};\r\nfunction push(arg0: string) {\r\n  throw new Error(\"Function not implemented.\");\r\n}\r\n\r\nconst InquilinoController = {\r\n  criarInquilino,\r\n  pegarInquilinos,\r\n};\r\nexport default InquilinoController;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}