{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { prisma } from \"../database/prisma\";\nexport var criarImovel = function () {\n  var _ref = _asyncToGenerator(function* (req, res) {\n    var _req$body = req.body,\n      icm = _req$body.icm,\n      tipo = _req$body.tipo,\n      enderecoId = _req$body.enderecoId;\n    if (!icm || !tipo || !enderecoId) {\n      return res.status(422).json({\n        mensagem: \"Preencha todos os campos obrigatórios para criar o Imóvel.\"\n      });\n    } else {\n      try {\n        var endereco = yield prisma.endereco.findUnique({\n          where: {\n            id: enderecoId\n          }\n        });\n        if (!endereco) {\n          return res.status(404).json({\n            mensagem: \"Endereço não encontrado\"\n          });\n        }\n        var imovel = yield prisma.imovel.create({\n          data: {\n            icm: icm,\n            tipo: tipo,\n            endereco: {\n              connect: {\n                id: enderecoId\n              }\n            }\n          }\n        });\n        return res.json({\n          imovel: imovel\n        });\n      } catch (error) {\n        console.error(error);\n        return res.status(500).json({\n          mensagem: \"Erro ao criar Imóvel\"\n        });\n      }\n    }\n  });\n  return function criarImovel(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var pegarImoveis = function () {\n  var _ref2 = _asyncToGenerator(function* (req, res) {\n    var imoveis = yield prisma.imovel.findMany();\n    return res.json(imoveis);\n  });\n  return function pegarImoveis(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar ImovelController = {\n  criarImovel: criarImovel,\n  pegarImoveis: pegarImoveis\n};\nexport default ImovelController;","map":{"version":3,"names":["prisma","criarImovel","_ref","_asyncToGenerator","req","res","_req$body","body","icm","tipo","enderecoId","status","json","mensagem","endereco","findUnique","where","id","imovel","create","data","connect","error","console","_x","_x2","apply","arguments","pegarImoveis","_ref2","imoveis","findMany","_x3","_x4","ImovelController"],"sources":["C:/Users/digoR/OneDrive/Área de Trabalho/DEV/Sollos/Deploy/VistoApp_Backend/src/controller/ImovelController.ts"],"sourcesContent":["import { Request, Response } from \"express\";\r\nimport { prisma } from \"../database/prisma\";\r\n\r\nexport const criarImovel = async (req: Request, res: Response) => {\r\n  const { icm, tipo, enderecoId } = req.body;\r\n\r\n  if (!icm || !tipo || !enderecoId) {\r\n    return res.status(422).json({\r\n      mensagem: \"Preencha todos os campos obrigatórios para criar o Imóvel.\",\r\n    });\r\n  } else {\r\n    try {\r\n      // Verifica se o endereço com o ID fornecido existe\r\n      const endereco = await prisma.endereco.findUnique({\r\n        where: {\r\n          id: enderecoId,\r\n        },\r\n      });\r\n\r\n      if (!endereco) {\r\n        return res.status(404).json({ mensagem: \"Endereço não encontrado\" });\r\n      }\r\n\r\n      // Cria o Imóvel no banco de dados e associa ao Endereço existente\r\n      const imovel = await prisma.imovel.create({\r\n        data: {\r\n          icm,\r\n          tipo,\r\n          endereco: {\r\n            connect: {\r\n              id: enderecoId,\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      // Retorna o Imóvel criado como resposta\r\n      return res.json({ imovel });\r\n    } catch (error) {\r\n      console.error(error);\r\n      return res.status(500).json({ mensagem: \"Erro ao criar Imóvel\" });\r\n    }\r\n  }\r\n};\r\n\r\nexport const pegarImoveis = async (req: Request, res: Response) => {\r\n  // Busca todos os Imóveis no banco de dados usando o Prisma\r\n  const imoveis = await prisma.imovel.findMany();\r\n\r\n  // Retorna a lista de Imóveis como resposta\r\n  return res.json(imoveis);\r\n};\r\n\r\nconst ImovelController = {\r\n  criarImovel,\r\n  pegarImoveis,\r\n};\r\n\r\nexport default ImovelController;\r\n"],"mappings":";AACA,SAASA,MAAM;AAEf,OAAO,IAAMC,WAAW;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,GAAY,EAAEC,GAAa,EAAK;IAChE,IAAAC,SAAA,GAAkCF,GAAG,CAACG,IAAI;MAAlCC,GAAG,GAAAF,SAAA,CAAHE,GAAG;MAAEC,IAAI,GAAAH,SAAA,CAAJG,IAAI;MAAEC,UAAU,GAAAJ,SAAA,CAAVI,UAAU;IAE7B,IAAI,CAACF,GAAG,IAAI,CAACC,IAAI,IAAI,CAACC,UAAU,EAAE;MAChC,OAAOL,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,IAAI;QAEF,IAAMC,QAAQ,SAASd,MAAM,CAACc,QAAQ,CAACC,UAAU,CAAC;UAChDC,KAAK,EAAE;YACLC,EAAE,EAAEP;UACN;QACF,CAAC,CAAC;QAEF,IAAI,CAACI,QAAQ,EAAE;UACb,OAAOT,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;YAAEC,QAAQ,EAAE;UAA0B,CAAC,CAAC;QACtE;QAGA,IAAMK,MAAM,SAASlB,MAAM,CAACkB,MAAM,CAACC,MAAM,CAAC;UACxCC,IAAI,EAAE;YACJZ,GAAG,EAAHA,GAAG;YACHC,IAAI,EAAJA,IAAI;YACJK,QAAQ,EAAE;cACRO,OAAO,EAAE;gBACPJ,EAAE,EAAEP;cACN;YACF;UACF;QACF,CAAC,CAAC;QAGF,OAAOL,GAAG,CAACO,IAAI,CAAC;UAAEM,MAAM,EAANA;QAAO,CAAC,CAAC;MAC7B,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpB,OAAOjB,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAAEC,QAAQ,EAAE;QAAuB,CAAC,CAAC;MACnE;IACF;EACF,CAAC;EAAA,gBAxCYZ,WAAWA,CAAAuB,EAAA,EAAAC,GAAA;IAAA,OAAAvB,IAAA,CAAAwB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAwCvB;AAED,OAAO,IAAMC,YAAY;EAAA,IAAAC,KAAA,GAAA1B,iBAAA,CAAG,WAAOC,GAAY,EAAEC,GAAa,EAAK;IAEjE,IAAMyB,OAAO,SAAS9B,MAAM,CAACkB,MAAM,CAACa,QAAQ,CAAC,CAAC;IAG9C,OAAO1B,GAAG,CAACO,IAAI,CAACkB,OAAO,CAAC;EAC1B,CAAC;EAAA,gBANYF,YAAYA,CAAAI,GAAA,EAAAC,GAAA;IAAA,OAAAJ,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA,GAMxB;AAED,IAAMO,gBAAgB,GAAG;EACvBjC,WAAW,EAAXA,WAAW;EACX2B,YAAY,EAAZA;AACF,CAAC;AAED,eAAeM,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}