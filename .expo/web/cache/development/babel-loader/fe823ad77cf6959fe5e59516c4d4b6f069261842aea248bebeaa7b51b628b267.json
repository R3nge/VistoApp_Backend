{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { prisma } from \"../database/prisma\";\nvar criarEndereco = function () {\n  var _ref = _asyncToGenerator(function* (req, res) {\n    try {\n      var _req$body = req.body,\n        rua = _req$body.rua,\n        complemento = _req$body.complemento,\n        numero = _req$body.numero,\n        bairro = _req$body.bairro,\n        cidade = _req$body.cidade,\n        estado = _req$body.estado,\n        cep = _req$body.cep;\n      console.log(\"Recebendo dados para criar endereço:\", req.body);\n      if (!rua || !complemento || !numero || !bairro || !cidade || !estado || !cep) {\n        return res.status(422).json({\n          mensagem: \"Para cadastrar um Endereço preencha todos os campos!\"\n        });\n      } else {\n        var endereco = yield prisma.endereco.create({\n          data: {\n            rua: rua,\n            complemento: complemento,\n            numero: numero,\n            bairro: bairro,\n            cidade: cidade,\n            estado: estado,\n            cep: cep\n          }\n        });\n        console.log(\"Endereço criado com sucesso:\", endereco);\n        res.json(endereco);\n      }\n    } catch (error) {\n      console.error(\"Erro ao criar endereço:\", error);\n      res.status(500).json({\n        error: \"Erro interno ao criar endereço\"\n      });\n    }\n  });\n  return function criarEndereco(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var pegarEnderecos = function () {\n  var _ref2 = _asyncToGenerator(function* (req, res) {\n    try {\n      console.log(\"Buscando endereços...\");\n      var enderecos = yield prisma.endereco.findMany();\n      console.log(\"Endereços encontrados:\", enderecos);\n      res.json(enderecos);\n    } catch (error) {\n      console.error(\"Erro ao buscar endereços:\", error);\n      res.status(500).json({\n        error: \"Erro interno ao buscar endereços\"\n      });\n    }\n  });\n  return function pegarEnderecos(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar EnderecoController = {\n  criarEndereco: criarEndereco,\n  pegarEnderecos: pegarEnderecos\n};\nexport default EnderecoController;","map":{"version":3,"names":["prisma","criarEndereco","_ref","_asyncToGenerator","req","res","_req$body","body","rua","complemento","numero","bairro","cidade","estado","cep","console","log","status","json","mensagem","endereco","create","data","error","_x","_x2","apply","arguments","pegarEnderecos","_ref2","enderecos","findMany","_x3","_x4","EnderecoController"],"sources":["C:/Users/digoR/OneDrive/Área de Trabalho/DEV/Sollos/Deploy/VistoApp_Backend/src/controller/EnderecoController.ts"],"sourcesContent":["// EnderecoController.ts\r\nimport { Request, Response } from \"express\";\r\nimport { prisma } from \"../database/prisma\";\r\n\r\nconst criarEndereco = async (req: Request, res: Response) => {\r\n  try {\r\n    const { rua, complemento, numero, bairro, cidade, estado, cep } = req.body;\r\n\r\n    console.log(\"Recebendo dados para criar endereço:\", req.body);\r\n\r\n    if (\r\n      !rua ||\r\n      !complemento ||\r\n      !numero ||\r\n      !bairro ||\r\n      !cidade ||\r\n      !estado ||\r\n      !cep\r\n    ) {\r\n      return res.status(422).json({\r\n        mensagem: \"Para cadastrar um Endereço preencha todos os campos!\",\r\n      });\r\n    } else {\r\n      const endereco = await prisma.endereco.create({\r\n        data: {\r\n          rua,\r\n          complemento,\r\n          numero,\r\n          bairro,\r\n          cidade,\r\n          estado,\r\n          cep,\r\n        },\r\n      });\r\n\r\n      console.log(\"Endereço criado com sucesso:\", endereco);\r\n\r\n      res.json(endereco);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Erro ao criar endereço:\", error);\r\n    res.status(500).json({ error: \"Erro interno ao criar endereço\" });\r\n  }\r\n};\r\n\r\nexport const pegarEnderecos = async (req: Request, res: Response) => {\r\n  try {\r\n    console.log(\"Buscando endereços...\");\r\n\r\n    const enderecos = await prisma.endereco.findMany();\r\n\r\n    console.log(\"Endereços encontrados:\", enderecos);\r\n\r\n    res.json(enderecos);\r\n  } catch (error) {\r\n    console.error(\"Erro ao buscar endereços:\", error);\r\n    res.status(500).json({ error: \"Erro interno ao buscar endereços\" });\r\n  }\r\n};\r\n\r\nconst EnderecoController = {\r\n  criarEndereco,\r\n  pegarEnderecos,\r\n};\r\n\r\nexport default EnderecoController;\r\n"],"mappings":";AAEA,SAASA,MAAM;AAEf,IAAMC,aAAa;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,GAAY,EAAEC,GAAa,EAAK;IAC3D,IAAI;MACF,IAAAC,SAAA,GAAkEF,GAAG,CAACG,IAAI;QAAlEC,GAAG,GAAAF,SAAA,CAAHE,GAAG;QAAEC,WAAW,GAAAH,SAAA,CAAXG,WAAW;QAAEC,MAAM,GAAAJ,SAAA,CAANI,MAAM;QAAEC,MAAM,GAAAL,SAAA,CAANK,MAAM;QAAEC,MAAM,GAAAN,SAAA,CAANM,MAAM;QAAEC,MAAM,GAAAP,SAAA,CAANO,MAAM;QAAEC,GAAG,GAAAR,SAAA,CAAHQ,GAAG;MAE7DC,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEZ,GAAG,CAACG,IAAI,CAAC;MAE7D,IACE,CAACC,GAAG,IACJ,CAACC,WAAW,IACZ,CAACC,MAAM,IACP,CAACC,MAAM,IACP,CAACC,MAAM,IACP,CAACC,MAAM,IACP,CAACC,GAAG,EACJ;QACA,OAAOT,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAC1BC,QAAQ,EAAE;QACZ,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,IAAMC,QAAQ,SAASpB,MAAM,CAACoB,QAAQ,CAACC,MAAM,CAAC;UAC5CC,IAAI,EAAE;YACJd,GAAG,EAAHA,GAAG;YACHC,WAAW,EAAXA,WAAW;YACXC,MAAM,EAANA,MAAM;YACNC,MAAM,EAANA,MAAM;YACNC,MAAM,EAANA,MAAM;YACNC,MAAM,EAANA,MAAM;YACNC,GAAG,EAAHA;UACF;QACF,CAAC,CAAC;QAEFC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEI,QAAQ,CAAC;QAErDf,GAAG,CAACa,IAAI,CAACE,QAAQ,CAAC;MACpB;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/ClB,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEK,KAAK,EAAE;MAAiC,CAAC,CAAC;IACnE;EACF,CAAC;EAAA,gBAvCKtB,aAAaA,CAAAuB,EAAA,EAAAC,GAAA;IAAA,OAAAvB,IAAA,CAAAwB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAuClB;AAED,OAAO,IAAMC,cAAc;EAAA,IAAAC,KAAA,GAAA1B,iBAAA,CAAG,WAAOC,GAAY,EAAEC,GAAa,EAAK;IACnE,IAAI;MACFU,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MAEpC,IAAMc,SAAS,SAAS9B,MAAM,CAACoB,QAAQ,CAACW,QAAQ,CAAC,CAAC;MAElDhB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEc,SAAS,CAAC;MAEhDzB,GAAG,CAACa,IAAI,CAACY,SAAS,CAAC;IACrB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDlB,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEK,KAAK,EAAE;MAAmC,CAAC,CAAC;IACrE;EACF,CAAC;EAAA,gBAbYK,cAAcA,CAAAI,GAAA,EAAAC,GAAA;IAAA,OAAAJ,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA,GAa1B;AAED,IAAMO,kBAAkB,GAAG;EACzBjC,aAAa,EAAbA,aAAa;EACb2B,cAAc,EAAdA;AACF,CAAC;AAED,eAAeM,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}