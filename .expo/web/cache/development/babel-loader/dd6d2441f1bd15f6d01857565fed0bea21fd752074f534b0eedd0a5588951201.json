{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { prisma } from \"../database/prisma\";\nexport var Alugar = function () {\n  var _ref = _asyncToGenerator(function* (req, res) {\n    var _req$body = req.body,\n      inquilinoId = _req$body.inquilinoId,\n      imovelId = _req$body.imovelId;\n    if (!inquilinoId || !imovelId) {\n      return res.status(422).json({\n        mensagem: \"Para alugar um imóvel, forneça o ID do inquilino e o ID do imóvel.\"\n      });\n    } else {\n      try {\n        var aluguel = yield prisma.aluga.create({\n          data: {\n            imovelId: imovelId,\n            inquilinoId: inquilinoId\n          }\n        });\n        return res.json(aluguel);\n      } catch (error) {\n        console.error(error);\n        return res.status(500).json({\n          mensagem: \"Erro ao alugar imóvel.\"\n        });\n      }\n    }\n  });\n  return function Alugar(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var pegarAlugueis = function () {\n  var _ref2 = _asyncToGenerator(function* (req, res) {\n    var aluguel = yield prisma.aluga.findMany();\n    return res.json(aluguel);\n  });\n  return function pegarAlugueis(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar AlugaController = {\n  Alugar: Alugar,\n  pegarAlugueis: pegarAlugueis\n};\nexport default AlugaController;","map":{"version":3,"names":["prisma","Alugar","_ref","_asyncToGenerator","req","res","_req$body","body","inquilinoId","imovelId","status","json","mensagem","aluguel","aluga","create","data","error","console","_x","_x2","apply","arguments","pegarAlugueis","_ref2","findMany","_x3","_x4","AlugaController"],"sources":["C:/Users/digoR/OneDrive/Área de Trabalho/DEV/Sollos/Deploy/VistoApp_Backend/src/controller/AlugaController.ts"],"sourcesContent":["import { Request, Response } from \"express\";\r\nimport { prisma } from \"../database/prisma\";\r\n\r\nexport const Alugar = async (req: Request, res: Response) => {\r\n  const { inquilinoId, imovelId } = req.body;\r\n\r\n  if (!inquilinoId || !imovelId) {\r\n    return res.status(422).json({\r\n      mensagem:\r\n        \"Para alugar um imóvel, forneça o ID do inquilino e o ID do imóvel.\",\r\n    });\r\n  } else {\r\n    try {\r\n      const aluguel = await prisma.aluga.create({\r\n        data: {\r\n          imovelId: imovelId,\r\n          inquilinoId: inquilinoId,\r\n        },\r\n      });\r\n      return res.json(aluguel);\r\n    } catch (error) {\r\n      console.error(error);\r\n      return res.status(500).json({ mensagem: \"Erro ao alugar imóvel.\" });\r\n    }\r\n  }\r\n};\r\n\r\nexport const pegarAlugueis = async (req: Request, res: Response) => {\r\n  const aluguel = await prisma.aluga.findMany();\r\n\r\n  return res.json(aluguel);\r\n};\r\n\r\nconst AlugaController = {\r\n  Alugar,\r\n  pegarAlugueis,\r\n};\r\nexport default AlugaController;\r\n"],"mappings":";AACA,SAASA,MAAM;AAEf,OAAO,IAAMC,MAAM;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,GAAY,EAAEC,GAAa,EAAK;IAC3D,IAAAC,SAAA,GAAkCF,GAAG,CAACG,IAAI;MAAlCC,WAAW,GAAAF,SAAA,CAAXE,WAAW;MAAEC,QAAQ,GAAAH,SAAA,CAARG,QAAQ;IAE7B,IAAI,CAACD,WAAW,IAAI,CAACC,QAAQ,EAAE;MAC7B,OAAOJ,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,QAAQ,EACN;MACJ,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,IAAI;QACF,IAAMC,OAAO,SAASb,MAAM,CAACc,KAAK,CAACC,MAAM,CAAC;UACxCC,IAAI,EAAE;YACJP,QAAQ,EAAEA,QAAQ;YAClBD,WAAW,EAAEA;UACf;QACF,CAAC,CAAC;QACF,OAAOH,GAAG,CAACM,IAAI,CAACE,OAAO,CAAC;MAC1B,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpB,OAAOZ,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAAEC,QAAQ,EAAE;QAAyB,CAAC,CAAC;MACrE;IACF;EACF,CAAC;EAAA,gBAtBYX,MAAMA,CAAAkB,EAAA,EAAAC,GAAA;IAAA,OAAAlB,IAAA,CAAAmB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAsBlB;AAED,OAAO,IAAMC,aAAa;EAAA,IAAAC,KAAA,GAAArB,iBAAA,CAAG,WAAOC,GAAY,EAAEC,GAAa,EAAK;IAClE,IAAMQ,OAAO,SAASb,MAAM,CAACc,KAAK,CAACW,QAAQ,CAAC,CAAC;IAE7C,OAAOpB,GAAG,CAACM,IAAI,CAACE,OAAO,CAAC;EAC1B,CAAC;EAAA,gBAJYU,aAAaA,CAAAG,GAAA,EAAAC,GAAA;IAAA,OAAAH,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA,GAIzB;AAED,IAAMM,eAAe,GAAG;EACtB3B,MAAM,EAANA,MAAM;EACNsB,aAAa,EAAbA;AACF,CAAC;AACD,eAAeK,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}