{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { prisma } from \"../database/prisma\";\nexport var criarProprietario = function () {\n  var _ref = _asyncToGenerator(function* (req, res) {\n    try {\n      var _req$body = req.body,\n        cpf = _req$body.cpf,\n        name = _req$body.name,\n        tel = _req$body.tel,\n        email = _req$body.email,\n        enderecoId = _req$body.enderecoId;\n      var errors = [];\n      if (!cpf) {\n        errors.push(\"O campo 'cpf' é obrigatório.\");\n      }\n      if (!name) {\n        errors.push(\"O campo 'name' é obrigatório.\");\n      }\n      if (!tel) {\n        errors.push(\"O campo 'tel' é obrigatório.\");\n      }\n      if (!email) {\n        errors.push(\"O campo 'email' é obrigatório.\");\n      }\n      if (!enderecoId) {\n        errors.push(\"O campo 'enderecoId' é obrigatório.\");\n      }\n      if (errors.length > 0) {\n        return res.status(422).json({\n          mensagem: \"Por favor, corrija os seguintes erros:\",\n          errors: errors\n        });\n      }\n      var endereco = yield prisma.endereco.findUnique({\n        where: {\n          id: enderecoId\n        }\n      });\n      if (!endereco) {\n        return res.status(404).json({\n          mensagem: \"Endereço não encontrado\"\n        });\n      }\n      var proprietario = yield prisma.proprietario.create({\n        data: {\n          cpf: cpf,\n          name: name,\n          tel: tel,\n          email: email,\n          endereco: {\n            connect: {\n              id: enderecoId\n            }\n          }\n        }\n      });\n      return res.json(proprietario);\n    } catch (error) {\n      return res.status(500).json({\n        mensagem: \"Erro interno do servidor\"\n      });\n    } finally {\n      yield prisma.$disconnect();\n    }\n  });\n  return function criarProprietario(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var pegarProprietarios = function () {\n  var _ref2 = _asyncToGenerator(function* (req, res) {\n    try {\n      var proprietarios = yield prisma.proprietario.findMany();\n      return res.json(proprietarios);\n    } catch (error) {\n      return res.status(500).json({\n        mensagem: \"Erro interno do servidor\"\n      });\n    } finally {\n      yield prisma.$disconnect();\n    }\n  });\n  return function pegarProprietarios(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var pegarUnicoProprietario = function () {\n  var _ref3 = _asyncToGenerator(function* (req, res) {\n    try {\n      var cpf = req.params.cpf;\n      var proprietario = yield prisma.proprietario.findUnique({\n        where: {\n          cpf: cpf\n        },\n        include: {\n          endereco: true\n        }\n      });\n      if (!proprietario) {\n        return res.status(404).json({\n          mensagem: \"Proprietário não encontrado\"\n        });\n      }\n      return res.status(200).json(proprietario);\n    } catch (error) {\n      return res.status(500).json({\n        mensagem: \"Erro interno do servidor\"\n      });\n    } finally {\n      yield prisma.$disconnect();\n    }\n  });\n  return function pegarUnicoProprietario(_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar PropietarioController = {\n  criarProprietario: criarProprietario,\n  pegarProprietarios: pegarProprietarios,\n  pegarUnicoProprietario: pegarUnicoProprietario\n};\nexport default PropietarioController;","map":{"version":3,"names":["prisma","criarProprietario","_ref","_asyncToGenerator","req","res","_req$body","body","cpf","name","tel","email","enderecoId","errors","push","length","status","json","mensagem","endereco","findUnique","where","id","proprietario","create","data","connect","error","$disconnect","_x","_x2","apply","arguments","pegarProprietarios","_ref2","proprietarios","findMany","_x3","_x4","pegarUnicoProprietario","_ref3","params","include","_x5","_x6","PropietarioController"],"sources":["C:/Users/digoR/OneDrive/Área de Trabalho/DEV/Sollos/Deploy/VistoApp_Backend/src/controller/PropietarioController.ts"],"sourcesContent":["import { Request, Response } from \"express\";\r\nimport { prisma } from \"../database/prisma\";\r\n\r\nexport const criarProprietario = async (req: Request, res: Response) => {\r\n  try {\r\n    const { cpf, name, tel, email, enderecoId } = req.body;\r\n    const errors = [];\r\n\r\n    if (!cpf) {\r\n      errors.push(\"O campo 'cpf' é obrigatório.\");\r\n    }\r\n\r\n    if (!name) {\r\n      errors.push(\"O campo 'name' é obrigatório.\");\r\n    }\r\n\r\n    if (!tel) {\r\n      errors.push(\"O campo 'tel' é obrigatório.\");\r\n    }\r\n\r\n    if (!email) {\r\n      errors.push(\"O campo 'email' é obrigatório.\");\r\n    }\r\n\r\n    if (!enderecoId) {\r\n      errors.push(\"O campo 'enderecoId' é obrigatório.\");\r\n    }\r\n\r\n    if (errors.length > 0) {\r\n      return res.status(422).json({\r\n        mensagem: \"Por favor, corrija os seguintes erros:\",\r\n        errors,\r\n      });\r\n    }\r\n\r\n    const endereco = await prisma.endereco.findUnique({\r\n      where: {\r\n        id: enderecoId,\r\n      },\r\n    });\r\n\r\n    if (!endereco) {\r\n      return res.status(404).json({ mensagem: \"Endereço não encontrado\" });\r\n    }\r\n\r\n    const proprietario = await prisma.proprietario.create({\r\n      data: {\r\n        cpf,\r\n        name,\r\n        tel,\r\n        email,\r\n        endereco: {\r\n          connect: {\r\n            id: enderecoId,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    return res.json(proprietario);\r\n  } catch (error) {\r\n    return res.status(500).json({ mensagem: \"Erro interno do servidor\" });\r\n  } finally {\r\n    await prisma.$disconnect();\r\n  }\r\n};\r\n\r\nexport const pegarProprietarios = async (req: Request, res: Response) => {\r\n  try {\r\n    const proprietarios = await prisma.proprietario.findMany();\r\n\r\n    return res.json(proprietarios);\r\n  } catch (error) {\r\n    return res.status(500).json({ mensagem: \"Erro interno do servidor\" });\r\n  } finally {\r\n    await prisma.$disconnect();\r\n  }\r\n};\r\n\r\nexport const pegarUnicoProprietario = async (req: Request, res: Response) => {\r\n  try {\r\n    const { cpf } = req.params;\r\n\r\n    const proprietario = await prisma.proprietario.findUnique({\r\n      where: {\r\n        cpf,\r\n      },\r\n      include: {\r\n        endereco: true,\r\n      },\r\n    });\r\n\r\n    if (!proprietario) {\r\n      return res.status(404).json({ mensagem: \"Proprietário não encontrado\" });\r\n    }\r\n\r\n    return res.status(200).json(proprietario);\r\n  } catch (error) {\r\n    return res.status(500).json({ mensagem: \"Erro interno do servidor\" });\r\n  } finally {\r\n    await prisma.$disconnect();\r\n  }\r\n};\r\n\r\nconst PropietarioController = {\r\n  criarProprietario,\r\n  pegarProprietarios,\r\n  pegarUnicoProprietario,\r\n};\r\nexport default PropietarioController;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}